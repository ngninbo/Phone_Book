type: edu
custom_name: stage2
files:
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n                new TestCase().setTimeLimit(30 * 60\
    \ * 1000)\n        );\n    }\n    \n    private CheckResult checkPhrases(String\
    \ reply, String... phrases) {\n        reply = reply.toLowerCase();\n        for\
    \ (String phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\");\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 2) {\n            return CheckResult.wrong(\"\
    Your output should contain twice the phrase `500 / 500`\");\n        }\n     \
    \   \n        \n        List<String> timestamps = findAll(reply, timeRegex);\n\
    \        if (timestamps.size() != 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 timer outputs, but found \"\n                   \
    \ + timestamps.size());\n        }\n        // should not fail..\n        long\
    \ t1 = parseTimestamp(timestamps.get(0));\n        long t2 = parseTimestamp(timestamps.get(1));\n\
    \        long t3 = parseTimestamp(timestamps.get(2));\n        long t4 = parseTimestamp(timestamps.get(3));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.wrong(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        \n        long estimatedTime = t1 + t2;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.wrong(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (reply.toLowerCase().contains(\"\
    stopped\")) {\n            if (t3 < t1) {\n                return CheckResult.wrong(\"\
    You printed `stopped`, \" +\n                        \"but the sorting time was\
    \ less than the first linear search time.\");\n            }\n        }\n    \
    \    \n        return CheckResult.correct();\n    }\n}\n"
  learner_created: false
- name: src/phonebook/Person.java
  visible: true
  text: |
    package phonebook;

    import java.util.Objects;

    public class Person {

        private String number;
        private String name;

        public Person(String number, String name) {
            this.number = number;
            this.name = name;
        }

        public String getNumber() {
            return number;
        }

        public void setNumber(String number) {
            this.number = number;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Person)) return false;
            Person person = (Person) o;
            return Objects.equals(getNumber(), person.getNumber()) && Objects.equals(getName(), person.getName());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getNumber(), getName());
        }

        @Override
        public String toString() {
            return "Person{" +
                    "number='" + number + '\'' +
                    ", name='" + name + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/phonebook/SearchAlgorithm.java
  visible: true
  learner_created: true
- name: src/phonebook/SearchContext.java
  visible: true
  text: |
    package phonebook;

    import java.util.ArrayList;
    import java.util.List;

    public class Finder {

        private final List<Person> persons;
        private final List<String> names;

        public Finder(List<Person> people, List<String> names) {
            this.persons = people;
            this.names = names;
        }

        public void search() {
            long items = names.size();
            List<Person> results = new ArrayList<>();
            final long millisecond = 1000; //s
            final long minute = 60; // s
            System.out.println("Start searching...");
            long start = System.currentTimeMillis();
            for (String name : names) {
                for (Person person : persons) {
                    if (person.getName().equals(name)) {
                        results.add(person);
                    }
                }
            }

            long end = System.currentTimeMillis();

            long duration = end - start; //ms

            final long minutes = duration / (minute * millisecond);
            final long seconds = duration % (minute * millisecond) / millisecond;
            final long milliseconds = duration % (minute * millisecond) % millisecond;
            System.out.printf("Found %d / %d entries. Time taken: %d min. %d sec. %d ms.\n",
                    results.size(), items, minutes, seconds, milliseconds);
        }
    }
  learner_created: true
- name: src/phonebook/SearchUtil.java
  visible: true
  text: |
    package phonebook;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class PhoneBookUtil {

        public static final String DIRECTORY_PATH = "/Users/bdongmo-ngnintedem/Downloads/directory.txt";
        public static final String FIND_PATH = "/Users/bdongmo-ngnintedem/Downloads/find.txt";

        public static List<Person> getPersons() throws FileNotFoundException {
            List<Person> persons = new ArrayList<>();
            File file = new File(DIRECTORY_PATH);

            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                final Pattern pattern = Pattern.compile("\\d+");
                final Matcher matcher = pattern.matcher(line);

                if (matcher.find()) {
                    String number = matcher.group();
                    String name = line.replace(number, "").trim();
                    Person person = new Person(number, name);
                    persons.add(person);
                }
            }

            return persons;
        }

        public static List<String> loadNames() throws FileNotFoundException {
            List<String> names = new ArrayList<>();
            File file = new File(FIND_PATH);
            Scanner scanner = new Scanner(file);
            while (scanner.hasNext()) {
                names.add(scanner.nextLine());
            }

            return names;
        }
    }
  learner_created: true
- name: src/phonebook/SearchStrategy.java
  visible: true
  learner_created: true
- name: src/phonebook/Finder.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5483#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 01 Oct 2022 11:45:04 UTC
record: 2
